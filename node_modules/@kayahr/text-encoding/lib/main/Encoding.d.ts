import { Decoder, DecoderConstructor } from "./Decoder.js";
import { Encoder, EncoderConstructor } from "./Encoder.js";
/**
 * Registers an encoding.
 *
 * @param name    - The encoding name.
 * @param labels  - The list of encoding labels.
 * @param decoder - The constructor of the decoder which can decode this encoding.
 * @param encoder - The constructor of the encoder which can encode this encoding.
 * @return The created and registered encoding.
 */
export declare function registerEncoding(name: string, labels: readonly string[], decoder: DecoderConstructor, encoder: EncoderConstructor): Encoding;
/**
 * Returns the encoding for the specified label.
 *
 * @param label - The label of the encoding to look for.
 * @return The found encoding.
 * @throws RangeError - When encoding was not found.
 */
export declare function getEncoding(label: string): Encoding;
/**
 * Encoding.
 */
export declare class Encoding {
    private readonly name;
    private readonly labels;
    private readonly decoder;
    private readonly encoder;
    /**
     * Creates a new encoding.
     *
     * @param name - THe encoding name.
     * @param labels - The list of encoding labels.
     * @param decoder - The constructor of the decoder which can decode this encoding.
     * @param encoder - The constructor of the encoder which can encode this encoding.
     */
    constructor(name: string, labels: readonly string[], decoder: DecoderConstructor, encoder: EncoderConstructor);
    /**
     * Returns the encoding name.
     *
     * @return The encoding name.
     */
    getName(): string;
    /**
     * Checks if encoding has the given label.
     *
     * @param label - The label to check.
     * @return True if encoding has the label, false if not.
     */
    hasLabel(label: string): boolean;
    /**
     * Returns the labels of this encoding.
     *
     * @return The encoding labels.
     */
    getLabels(): readonly string[];
    /**
     * Creates a new decoder for this encoding.
     *
     * @param fatal - True to throw exception on decoding errors, false to use replacement characters instead for
     *                characters which can't be decoded.
     * @return The created decoder.
     */
    createDecoder(fatal?: boolean): Decoder;
    /**
     * Creates a new encoder for this encoding.
     *
     * @return The created encoder.
     */
    createEncoder(): Encoder;
}
